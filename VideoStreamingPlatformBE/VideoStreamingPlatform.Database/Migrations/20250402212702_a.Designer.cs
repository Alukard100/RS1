// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoStreamingPlatform.Database;

#nullable disable

namespace VideoStreamingPlatform.Database.Migrations
{
    [DbContext(typeof(VideoStreamingPlatformContext))]
    [Migration("20250402212702_a")]
    partial class a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.ActivePromoCode", b =>
                {
                    b.Property<int>("PromoCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("promoCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromoCodeId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("money")
                        .HasColumnName("balance");

                    b.Property<string>("CodeValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("codeValue");

                    b.Property<bool?>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isUsed")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("PromoCodeId");

                    b.ToTable("activePromoCodes", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("advertisementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementId"));

                    b.Property<string>("AdvertisementPictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("advertisementPictureURL");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("advertisement", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("content");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pictureURL");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.CardPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("CardholderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("CardPayments");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("postedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.EmojiShow", b =>
                {
                    b.Property<int>("EmojiShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmojiShowID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmojiShowId"));

                    b.Property<int?>("ClickCounter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EmojiName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emojiName");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.Property<string>("altName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmojiShowId");

                    b.HasIndex("VideoId");

                    b.ToTable("EmojiShow", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .HasColumnType("int")
                        .HasColumnName("GroupMemberID");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("membershipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("MembershipId");

                    b.HasIndex("UserId");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.MessageBody", b =>
                {
                    b.Property<int>("MessagebodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("messagebodyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessagebodyId"));

                    b.Property<int>("MsgSenderId")
                        .HasColumnType("int")
                        .HasColumnName("msgSenderID");

                    b.Property<int>("MsgRecieverId")
                        .HasColumnType("int")
                        .HasColumnName("msgRecieverID");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("body");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit")
                        .HasColumnName("seen");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("datetime")
                        .HasColumnName("timeSent");

                    b.HasKey("MessagebodyId", "MsgSenderId", "MsgRecieverId")
                        .HasName("PK_Message");

                    b.HasIndex("MsgRecieverId");

                    b.HasIndex("MsgSenderId");

                    b.ToTable("MessageBody", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("isRead");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("notificationTypeId");

                    b.Property<int?>("RecipientUserId")
                        .HasColumnType("int")
                        .HasColumnName("recipientUserID");

                    b.Property<int?>("SenderUserId")
                        .HasColumnType("int")
                        .HasColumnName("senderUserID");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificationTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"));

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("value");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("playlistID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"));

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("isPublic");

                    b.Property<string>("PlaylistName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("playlistName")
                        .HasDefaultValueSql("('playlist')");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("playlist", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.PlaylistGroup", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("playlistID");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("VideoId");

                    b.ToTable("playlistGroup", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.RatingSystemComment", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ratingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("commentID");

                    b.Property<int?>("DislikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dislikeCount")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("likeCount")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("RatingId")
                        .HasName("PK__ratingSy__2D290D49CF9B9C07");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.ToTable("ratingSystemComment", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.RatingSystemVideo", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ratingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int?>("DislikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dislikeCount")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("likeCount")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasKey("RatingId");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("ratingSystemVideo", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime?>("DateOfReport")
                        .HasColumnType("datetime")
                        .HasColumnName("dateOfReport");

                    b.Property<string>("ReportText")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("reportText");

                    b.Property<int?>("ReportTypeId")
                        .HasColumnType("int")
                        .HasColumnName("reportTypeId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.ReportType", b =>
                {
                    b.Property<int>("ReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportTypeId"));

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportType", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.SessionTable", b =>
                {
                    b.Property<int>("SessionTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sessionTableID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionTableId"));

                    b.Property<int?>("TimeStamp")
                        .HasColumnType("int")
                        .HasColumnName("timeStamp");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasKey("SessionTableId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("sessionTable", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Support", b =>
                {
                    b.Property<int>("SupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupportId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("body");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit")
                        .HasColumnName("seen");

                    b.Property<DateTime>("TimeSent")
                        .HasColumnType("datetime")
                        .HasColumnName("timeSent");

                    b.HasKey("SupportId", "UserId")
                        .HasName("PK_SupportMessage");

                    b.HasIndex("UserId");

                    b.ToTable("support", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Synchronization", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SyncOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("SyncOwnerID");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("VideoID");

                    b.HasKey("GroupId");

                    b.HasIndex("SyncOwnerId");

                    b.HasIndex("VideoId");

                    b.ToTable("synchronization", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.ThumbnailInfo", b =>
                {
                    b.Property<int>("ThumbnailInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thumbnailInfoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThumbnailInfoId"));

                    b.Property<byte[]>("ThumbnailPicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("thumbnailPicture");

                    b.Property<int>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasKey("ThumbnailInfoId");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("thumbnailInfo", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<DateTime?>("DateOfTransaction")
                        .HasColumnType("datetime")
                        .HasColumnName("dateOfTransaction");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("money")
                        .HasColumnName("transactionAmount");

                    b.Property<bool>("TransactionStatus")
                        .HasColumnType("bit")
                        .HasColumnName("transactionStatus");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birthDate");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("profilePicture");

                    b.Property<int?>("SubscriberCount")
                        .HasColumnType("int")
                        .HasColumnName("subscriberCount");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("surname");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("UserId");

                    b.HasIndex("TypeId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.UserType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("typeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("TypeId");

                    b.ToTable("UserType", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.UserValue", b =>
                {
                    b.Property<int>("UserValuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userValuesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserValuesId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("passwordHash");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("UserValuesId");

                    b.HasIndex("UserId");

                    b.ToTable("userValues", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("DurationInSecondes")
                        .HasColumnType("int")
                        .HasColumnName("durationInSecondes");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("filePath");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit")
                        .HasColumnName("isFree");

                    b.Property<string>("ResolutionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("resolutionType");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("uploadDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("videoName");

                    b.HasKey("VideoId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.VideoStatistic", b =>
                {
                    b.Property<int>("VideoStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("videoStatisticsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoStatisticsId"));

                    b.Property<int>("ClickCounter")
                        .HasColumnType("int")
                        .HasColumnName("clickCounter");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int")
                        .HasColumnName("videoID");

                    b.HasKey("VideoStatisticsId");

                    b.HasIndex("VideoId")
                        .IsUnique()
                        .HasFilter("[videoID] IS NOT NULL");

                    b.ToTable("VideoStatistics");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("walletID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal?>("Balance")
                        .HasColumnType("money")
                        .HasColumnName("balance");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Advertisement", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithMany("Advertisements")
                        .HasForeignKey("VideoId");

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Blog", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.CardPayment", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("CardPayments")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Comment", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.EmojiShow", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithMany("EmojiShows")
                        .HasForeignKey("VideoId");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.GroupMember", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Synchronization", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Membership", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.MessageBody", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "MsgReciever")
                        .WithMany("MessageBodyMsgRecievers")
                        .HasForeignKey("MsgRecieverId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "MsgSender")
                        .WithMany("MessageBodyMsgSenders")
                        .HasForeignKey("MsgSenderId")
                        .IsRequired();

                    b.Navigation("MsgReciever");

                    b.Navigation("MsgSender");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Notification", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId");

                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "RecipientUser")
                        .WithMany("NotificationRecipientUsers")
                        .HasForeignKey("RecipientUserId");

                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "SenderUser")
                        .WithMany("NotificationSenderUsers")
                        .HasForeignKey("SenderUserId");

                    b.Navigation("NotificationType");

                    b.Navigation("RecipientUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Playlist", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.PlaylistGroup", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Playlist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.RatingSystemComment", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Comment", "Comment")
                        .WithOne("RatingSystemComments")
                        .HasForeignKey("VideoStreamingPlatform.Database.Models.RatingSystemComment", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.RatingSystemVideo", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithOne("RatingSystemVideos")
                        .HasForeignKey("VideoStreamingPlatform.Database.Models.RatingSystemVideo", "VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Report", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.ReportType", "ReportType")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTypeId");

                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithMany("Reports")
                        .HasForeignKey("VideoId")
                        .IsRequired();

                    b.Navigation("ReportType");

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.SessionTable", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("SessionTables")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithMany("SessionTables")
                        .HasForeignKey("VideoId")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Support", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Supports")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Synchronization", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "SyncOwner")
                        .WithMany("Synchronizations")
                        .HasForeignKey("SyncOwnerId")
                        .IsRequired();

                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithMany("Synchronizations")
                        .HasForeignKey("VideoId")
                        .IsRequired();

                    b.Navigation("SyncOwner");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.ThumbnailInfo", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithOne("ThumbnailInfos")
                        .HasForeignKey("VideoStreamingPlatform.Database.Models.ThumbnailInfo", "VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Transaction", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.User", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.UserType", "Type")
                        .WithMany("Users")
                        .HasForeignKey("TypeId")
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.UserValue", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("UserValues")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Video", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Category", "Category")
                        .WithMany("Videos")
                        .HasForeignKey("CategoryId");

                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Videos")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.VideoStatistic", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.Video", "Video")
                        .WithOne("VideoStatistics")
                        .HasForeignKey("VideoStreamingPlatform.Database.Models.VideoStatistic", "VideoId");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Wallet", b =>
                {
                    b.HasOne("VideoStreamingPlatform.Database.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Category", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Comment", b =>
                {
                    b.Navigation("RatingSystemComments")
                        .IsRequired();
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.ReportType", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Synchronization", b =>
                {
                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Blogs");

                    b.Navigation("CardPayments");

                    b.Navigation("Comments");

                    b.Navigation("GroupMembers");

                    b.Navigation("Memberships");

                    b.Navigation("MessageBodyMsgRecievers");

                    b.Navigation("MessageBodyMsgSenders");

                    b.Navigation("NotificationRecipientUsers");

                    b.Navigation("NotificationSenderUsers");

                    b.Navigation("Playlists");

                    b.Navigation("Reports");

                    b.Navigation("SessionTables");

                    b.Navigation("Supports");

                    b.Navigation("Synchronizations");

                    b.Navigation("Transactions");

                    b.Navigation("UserValues");

                    b.Navigation("Videos");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VideoStreamingPlatform.Database.Models.Video", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Comments");

                    b.Navigation("EmojiShows");

                    b.Navigation("RatingSystemVideos")
                        .IsRequired();

                    b.Navigation("Reports");

                    b.Navigation("SessionTables");

                    b.Navigation("Synchronizations");

                    b.Navigation("ThumbnailInfos")
                        .IsRequired();

                    b.Navigation("VideoStatistics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
